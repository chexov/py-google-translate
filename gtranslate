#!/usr/bin/env python
# encoding: utf-8
import re
import sys
import urllib
import simplejson
import optparse
import string

baseUrl = "http://ajax.googleapis.com/ajax/services/language/translate"

def getSplits(text,splitLength=4500):
    '''
    Translate Api has a limit on length of text(4500 characters) that can be translated at once, 
    '''
    return (text[index:index+splitLength] for index in xrange(0,len(text),splitLength))

def translate(text, src=None, dest='en'):
    """
    A Python Wrapper for Google AJAX Language API:
    * Uses Google Language Detection, in cases source language is not provided with the source text
    * Splits up text if it's longer then 4500 characters, as a limit put up by the API
    """
    if not src:
        src = ''
    
    params = ({'langpair': '%s|%s' % (src, dest),
             'v': '1.0'
             })
    retText=''
    sourceLang = src
    for text in getSplits(text):
            params['q'] = text
            resp = simplejson.load(urllib.urlopen('%s' % (baseUrl), data = urllib.urlencode(params)))
            try:
                    retText += resp['responseData']['translatedText']
                    if not src:
                        sourceLang = resp['responseData']['detectedSourceLanguage']
            except:
                print "response:", resp
                raise
    return (retText, sourceLang)

def do_translation_from_file(src, dest, input_file):
    _text = u"dummy line"
    while _text:
        _text = input_file.readline()
        retText, sLng = translate(_text, src, dest)
        print retText

def do_translation(src, dest, text=None):
    msg = "      Write something You want to be translated,\n"\
          "      Enter ctrl+c to exit"
    if text:
        retText, sLng = translate(text, src, dest)
        print "# Translated from", sLng
        print retText
    else:
        print msg
        while True:
            text = raw_input('#>  ')
            retText = translate(text, src, dest)
            print retText

def main():
    parser = optparse.OptionParser()
    parser.add_option("-i", "--input", dest="input_file",
            help="Read input from file or STDIN in case '-i -'", default='-')
    parser.add_option("-t", "--to", dest="dest",
            help="Destination language (en|ru|jp). Default is en", metavar="LANG", default='en')
    parser.add_option("-f", "--from", dest="src",
            help="Source language (en|ru|jp). If not, determines automatically", metavar="LANG", default=None)
    (options, args) = parser.parse_args()

    # If there are no words from command line, reading from STDIN or input file
    if not args:
        __f = None
        if options.input_file == '-':
            __f = sys.stdin
        else:
            __f = open(options.input_file)
        try:
            do_translation_from_file(src=options.src, dest=options.dest, input_file=__f)
            return 0
        except KeyboardInterrupt:
            print "\n"
            sys.exit(0)
    
    # translate words from command arguments
    try:
        do_translation(src=options.src, dest=options.dest, text=string.join(args) )
        return 0
    except KeyboardInterrupt:
        print "\n"
        sys.exit(0)


if __name__=='__main__':
    main()

